---
import { getEntry, type CollectionEntry } from "astro:content";
import { Icon } from "@astrojs/starlight/components";

export interface Props {
  slug: CollectionEntry<"glossary">["slug"];
  label?: string;
}

const glossaryEntry = await getEntry("glossary", Astro.props.slug);
const { Content } = await glossaryEntry.render();
---

<glossary-link>
  <a href={`/reference/glossary#${glossaryEntry.slug}`} class="link">
    <span class="link-content"
      >{Astro.props.label ?? glossaryEntry.data.defaultLabel}</span
    ><Icon name="information" class="icon" />
  </a>

  <template class="card">
    <p class="glossary-link">
      <span>
        <a href={`/reference/glossary#${glossaryEntry.slug}`}>
          Go to glossary
        </a>&nbsp;<Icon name="right-arrow" class="icon arrow-icon" />
      </span>

      <button type="button" class="close-button">
        <Icon name="close" />
      </button>
    </p>

    <Content />

    <p class="external-link">
      <a href={glossaryEntry.data.externalUrl} target="_blank" rel="nofollow">
        Learn more&nbsp;<Icon name="external" class="icon" />
      </a>
    </p>
  </template>
</glossary-link>

<script>
  function isSmallScreen() {
    return window.matchMedia("screen and (max-width: 632px)").matches;
  }

  class GlossaryLinkCustomElement extends HTMLElement {
    link: HTMLAnchorElement;
    card: HTMLElement;
    template: HTMLTemplateElement;
    closeButton: HTMLButtonElement;

    constructor() {
      super();

      let isHoverlingCard = false;
      let scrollY = window.scrollY;
      let hasBeenClicked = false;
      this.link = this.querySelector("a")!;
      this.template = this.querySelector("template")!;
      this.card = document.createElement("article");
      this.card.innerHTML = this.template.innerHTML;
      this.closeButton = this.card.querySelector("button")!;
      this.card.classList.add("glossary-card");

      this.link.addEventListener("mouseenter", () => {
        if (isSmallScreen()) return;
        this.setCardTopValue();
        const linkRect = this.link.getBoundingClientRect();

        if (linkRect.left < document.body.clientWidth / 2) {
          this.card.style.left = `${linkRect.left}px`;
        } else {
          this.card.style.right = `${document.body.clientWidth - linkRect.right}px`;
        }

        setTimeout(() => document.body.prepend(this.card), 250);
      });

      this.link.addEventListener("mouseleave", () => {
        setTimeout(() => {
          if (!isHoverlingCard) this.card.remove();
        }, 250);
      });

      window.addEventListener("click", (e) => {
        if (!hasBeenClicked) return;
        hasBeenClicked = false;
        if (!this.card.contains(e.target as Node)) this.card.remove();
      });

      this.closeButton.addEventListener("click", () => {
        this.card.remove();
      });

      this.link.addEventListener("click", (e) => {
        if (!isSmallScreen()) return;
        e.preventDefault();

        setTimeout(() => {
          hasBeenClicked = true;
          this.setCardTopValue();
          this.card.style.left = "16px";
          setTimeout(() => document.body.prepend(this.card), 250);
        });
      });

      this.card.addEventListener("mouseenter", () => (isHoverlingCard = true));

      this.card.addEventListener(
        "mouseleave",
        () => (
          (isHoverlingCard = false), setTimeout(() => this.card.remove(), 250)
        )
      );

      window.addEventListener("scroll", () => {
        const scrollYOffset = window.scrollY - scrollY;
        scrollY = window.scrollY;
        const currentTop = +this.card.style.top.replace("px", "");
        this.card.style.top = `${currentTop - scrollYOffset}px`;
      });
    }

    setCardTopValue() {
      const linkRect = this.link.getBoundingClientRect();

      this.card.style.top = "100%";
      document.body.prepend(this.card);
      const cardRectHeight = this.card.getBoundingClientRect().height;
      this.card.remove();

      const isBottom = linkRect.top < window.innerHeight / 2 + 30;

      if (isBottom) {
        this.card.style.top = `${linkRect.top + linkRect.height + 6}px`;
        return;
      }

      this.card.style.top = `${linkRect.top - 6 - cardRectHeight}px`;
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define("glossary-link", GlossaryLinkCustomElement);
</script>

<style>
  glossary-link {
    display: contents;
  }

  .link {
    text-decoration: none;
  }

  .link-content {
    text-decoration: underline;
  }

  :global(.glossary-card) {
    position: fixed;
    z-index: 6;
    background-color: var(--sl-color-bg);
    max-width: 30rem;
    padding: 1rem 1.5rem;
    border: 1px solid var(--sl-color-gray-5);
  }

  .icon {
    display: inline-block !important;
  }

  .glossary-link {
    display: none;
    justify-content: space-between;
    margin-bottom: 1.5rem;
    font-weight: bold;
  }

  .arrow-icon {
    width: 1.25rem;
    height: 1.25rem;
  }

  .close-button {
    background-color: transparent;
    border: none;
    margin-right: -0.75rem;
  }

  .external-link {
    margin-top: 1.5rem;
  }

  @media screen and (max-width: 632px) {
    :global(.glossary-card) {
      width: calc(100% - 2rem);
    }

    .glossary-link {
      display: flex;
    }
  }
</style>
